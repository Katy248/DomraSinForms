@using DomraSinForms.Application.Questions.Commands.UpdateOptionsQuestion;
@using DomraSinForms.Domain.Models.Questions;
@using Microsoft.AspNetCore.Mvc.Localization;
@model QuestionBase
@inject IViewLocalizer Localizer
@{
    var deleteModalId = $"deleteModal{Model.Id}";
    var editModalId = $"editModal{Model.Id}";
    var questionTypes = new (string? Text, TextQuestionType Type)[]
    {
(Localizer["Text question"]?.Value, TextQuestionType.Text),
(Localizer["Number question"]?.Value, TextQuestionType.Number),
(Localizer["Date question"]?.Value, TextQuestionType.Date),
(Localizer["DateTime question"]?.Value, TextQuestionType.DateTime),
(Localizer["Time question"]?.Value, TextQuestionType.Time),
    };
    string GetTextQuestionTypeName(TextQuestion question)
    {
        return questionTypes.FirstOrDefault(qt => qt.Type == question.Type).Text ?? "";
    }
}
<div class="card">
    <div class="card-body">
        <div class=" h5">
            @Model.Index.
            @Model.QuestionText
        </div>
        <div>
            @Localizer["Is required"]: <input type="checkbox" checked="@Model.IsRequired" disabled />
        </div>
        @switch (Model)
        {
            case OptionsQuestion oq:
                {
                    <div>
                        @Localizer["Allow multiple choice"] <input type="checkbox" checked="@oq.AllowMultipleChoice" disabled />
                    </div>
                    @foreach (var option in oq.Options)
                    {
                        <input class="form-control mt-2" value="@option.Text" disabled />
                    }
                }
                break;
            case TextQuestion tq:
                {
                    <div>
                        @Localizer["Question type"]: @GetTextQuestionTypeName(tq)
                    </div>
                }
                break;
        }
        <div class="row mt-4 g-1">
            <div class="col-6">
                <button class="btn btn-outline-secondary form-control" data-bs-toggle="modal"
                    data-bs-target="#@editModalId">
                    <i class="bi-pencil me-2"></i>
                    @Localizer["Edit"]
                </button>
            </div>
            <div class="col-6">
                <button class="btn btn-outline-danger form-control" data-bs-toggle="modal"
                    data-bs-target="#@deleteModalId">
                    <i class="bi-trash3 me-2"></i>
                    @Localizer["Delete"]
                </button>
            </div>
        </div>
    </div>
</div>
<div class="modal" id="@deleteModalId">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content p-1 text-center">
            <div class="modal-body justify-content-center">
                <div class="h2 mb-5">@Localizer["Delete question?"]</div>
                <form asp-controller="Questions" asp-action="Delete" asp-route-id="@Model.Id"
                    asp-route-formId="@Model.FormId" method="post">
                    <input class="btn btn-danger" type="submit" value="@Localizer["Delete"]" />
                </form>
            </div>
        </div>
    </div>
</div>
@switch (Model)
{
    case OptionsQuestion oq:
        {
            @(
            await Html.PartialAsync("/Views/Questions/_UpdateOptionsQuestionModalPartial.cshtml",
            new UpdateOptionsQuestionCommand
{
    Id = oq.Id,
    AllowMultipleChoice = oq.AllowMultipleChoice,
    Index = oq.Index,
    IsRequired = oq.IsRequired,
    Options = oq.Options,
    QuestionText = oq.QuestionText,
},
            new ViewDataDictionary(ViewData)
{
{ "ModalId", editModalId }
})
            )
        }
        break;
    case TextQuestion tq:
        {
            @(
            await Html.PartialAsync("/Views/Questions/_UpdateTextQuestionModalPartial.cshtml",
            (UpdateTextQuestionViewModel)tq,
            new ViewDataDictionary(ViewData)
{
{ "FormId", Model.FormId },
{ "ModalId", editModalId }
})
            )
        }
        break;
}
