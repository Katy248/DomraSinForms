@using DomraSinForms.Application.Questions.Commands.CreateOptionsQuestion;
@using DomraSinForms.Domain.Models.Questions;
@using Microsoft.AspNetCore.Mvc.Localization;
@inject IViewLocalizer Localizer
@model CreateOptionsQuestionCommand
@{
    Model.FormId = ViewData["FormId"] as string ?? "";
    var modalId = ViewData["ModalId"] as string ?? "createOptionsQuestionModal";
    Model.Options.Add(new QuestionOption { Text = "" });
}
<div class="modal" id="@modalId">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content p-1">

            <div class="modal-body justify-content-center">

                <div class="h2 mb-5 text-center">@Localizer["New question"]</div>

                <form asp-controller="Questions" asp-action="CreateOptionsQuestion" method="post">

                    <input asp-for="FormId" value="@Model.FormId" hidden />

                    <div class="form-group mb-2">
                        <input class="form-control form-control-lg" type="text" placeholder="@Localizer["Question text"]" asp-for="QuestionText" />
                        <span asp-validation-for="QuestionText" class="text-danger"></span>
                    </div>

                    <div class="form-check mb-2">
                        <label class="form-check-label">@Localizer["Required"]</label>
                        <input class="form-check-input" type="checkbox" asp-for="IsRequired" />
                    </div>
                    <div class="form-check mb-2">
                        <label class="form-check-label">@Localizer["Allow multiple choice"]</label>
                        <input class="form-check-input" type="checkbox" asp-for="AllowMultipleChoice" />
                    </div>
                    <div class="form-group mb-2">
                        <div class="h3 text-center mt-4 mb-2">@Localizer["Options"]:</div>
                        <div id="options">
                            @foreach (var option in Model.Options)
                            {
                                @await Html.PartialAsync("/Views/Questions/_OptionPartial.cshtml", option);
                            }
                        </div>

                        <input class="form-control btn btn-outline-secondary" type="button" id="addoption" name="addoption" value="@Localizer["Add new option"]" />
                    </div>

                    <div class="form-group mb-2">
                        <input class="btn btn-primary form-control" type="submit" value="@Localizer["Create"]" />
                    </div>
                </form>

            </div>

        </div>
    </div>
</div>
<script type="text/javascript">

    
    const actionUrl = "@(Url.Action("AddNewOption", "Questions"))";

    function createElementFromHTML(htmlString) {
        let div = document.createElement('div');
        div.innerHTML = htmlString.trim();
        console.log(div);
        // Change this to div.childNodes to support multiple top-level nodes.
        return div;
    }

    function getPartialView(method, url) {
        return new Promise( (resolve, reject) => {
            const xhr = new XMLHttpRequest();
            
            xhr.open(method, url);
            
            xhr.onload = () => {
                if (xhr.status == 200) {
                    console.log("response Ok");
                    resolve(xhr.response);
                }
                else reject("");
            };
            
            xhr.onerror = () => {
                console.log(xhr.response);
                reject("");
            };
            
            xhr.send();
        })
    }
    addEventListener("load", (event) => {
        document.getElementById("addoption")?.addEventListener("click", () => {
            let view = getPartialView("POST", actionUrl)
                .then(data => {
                    console.log(data);
                    document.getElementById("options").appendChild(createElementFromHTML(data));
                })
                .catch(err => console.error(err));
        });
    });

    let deleteOption = (optionId) => {
        console.log("start removing option");
        document.getElementById(optionId).remove();
    }

</script>
@section Scripts
{
    
}