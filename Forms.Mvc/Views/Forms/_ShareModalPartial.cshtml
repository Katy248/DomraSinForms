@using Microsoft.AspNetCore.Mvc.Localization;
@inject IViewLocalizer Localizer
@model string
@{
    var modalId = ViewData["ModalId"] as string ?? "wrongId";
    var formattedId = modalId.Replace('-', '_');
    var url = Url.ActionLink(controller: "Answers", action: "Fill", values: new { id = Model });
}
<div class="modal" id="@modalId">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content p-1">

            <div class="modal-body justify-content-center">

                <div class="card-title h2 text-center">@Localizer["Share"]</div>
                <div class="card-text h4">@Localizer["Link"]:</div>
                <div class="input-group my-3">
                    <input class="form-control" value="@url" id="input@(formattedId)" />
                    <button 
                        class="btn btn-outline-info" 
                        id="button@(formattedId)"
                        data-bs-toggle="popover" data-bs-content='@Localizer["Copied"]'>
                        <i class="bi-clipboard2-plus"></i>
                    </button>
                </div>
                <div class="form-group" >
                    <button class="btn btn-outline-secondary form-control" data-bs-dismiss="modal">
                        @Localizer["Ok"]
                    </button>
                </div>
            </div>

        </div>
    </div>
</div>


<script>

    var btn = document.getElementById("button@(formattedId)");
    btn.addEventListener("click", async (clickEvent) => {

        const input = document.getElementById("input@(formattedId)");
        const copyText = document.getElementById("input@(formattedId)").value;
        document.getElementById("input@(formattedId)").select();

        if (!navigator.clipboard) {
            console.error("Can't copy");
            return;
        }
        await navigator.clipboard.writeText(copyText);
    });
    //document.addEventListener('load', () => {
    //    const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle="tooltip"]')
    //    const tooltipList = [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl))
    //});

</script>

